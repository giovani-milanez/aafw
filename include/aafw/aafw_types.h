/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef aafw_TYPES_H
#define aafw_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace aafw {

struct ACStatus {
  enum type {
    granted = 0,
    rejection = 1
  };
};

extern const std::map<int, const char*> _ACStatus_VALUES_TO_NAMES;

struct ACFailureInfo {
  enum type {
    badAlg = 0,
    badRequest = 2,
    badDataFormat = 5,
    notApproved = 15,
    unacceptedExtension = 16,
    untrustedRequester = 17,
    untrustedHolder = 18,
    unsupportedAttribute = 19,
    unsupportedTemplate = 20,
    unknownSerial = 21,
    systemFailure = 25
  };
};

extern const std::map<int, const char*> _ACFailureInfo_VALUES_TO_NAMES;

typedef std::map<std::string, std::string>  X509Name;

typedef struct _ACValidity__isset {
  _ACValidity__isset() : notBeforeEpoch(false), notAfterEpoch(false) {}
  bool notBeforeEpoch;
  bool notAfterEpoch;
} _ACValidity__isset;

class ACValidity {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  ACValidity() : notBeforeEpoch(0), notAfterEpoch(0) {
  }

  virtual ~ACValidity() throw() {}

  int32_t notBeforeEpoch;
  int32_t notAfterEpoch;

  _ACValidity__isset __isset;

  void __set_notBeforeEpoch(const int32_t val) {
    notBeforeEpoch = val;
  }

  void __set_notAfterEpoch(const int32_t val) {
    notAfterEpoch = val;
  }

  bool operator == (const ACValidity & rhs) const
  {
    if (!(notBeforeEpoch == rhs.notBeforeEpoch))
      return false;
    if (!(notAfterEpoch == rhs.notAfterEpoch))
      return false;
    return true;
  }
  bool operator != (const ACValidity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACValidity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACValidity &a, ACValidity &b);

typedef struct _Extension__isset {
  _Extension__isset() : oid(false), value(false) {}
  bool oid;
  bool value;
} _Extension__isset;

class Extension {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Extension() : oid(), value() {
  }

  virtual ~Extension() throw() {}

  std::string oid;
  std::string value;

  _Extension__isset __isset;

  void __set_oid(const std::string& val) {
    oid = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const Extension & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Extension &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Extension & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Extension &a, Extension &b);

typedef struct _Attribute__isset {
  _Attribute__isset() : oid(false), values(false) {}
  bool oid;
  bool values;
} _Attribute__isset;

class Attribute {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  Attribute() : oid() {
  }

  virtual ~Attribute() throw() {}

  std::string oid;
  std::vector<std::string>  values;

  _Attribute__isset __isset;

  void __set_oid(const std::string& val) {
    oid = val;
  }

  void __set_values(const std::vector<std::string> & val) {
    values = val;
  }

  bool operator == (const Attribute & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const Attribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Attribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Attribute &a, Attribute &b);

typedef struct _BaseCertId__isset {
  _BaseCertId__isset() : issuer(false), serial(false) {}
  bool issuer;
  bool serial;
} _BaseCertId__isset;

class BaseCertId {
 public:

  static const char* ascii_fingerprint; // = "8275A3654F3E556315307034EBB995BC";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x75,0xA3,0x65,0x4F,0x3E,0x55,0x63,0x15,0x30,0x70,0x34,0xEB,0xB9,0x95,0xBC};

  BaseCertId() : serial() {
  }

  virtual ~BaseCertId() throw() {}

  X509Name issuer;
  std::string serial;

  _BaseCertId__isset __isset;

  void __set_issuer(const X509Name& val) {
    issuer = val;
  }

  void __set_serial(const std::string& val) {
    serial = val;
  }

  bool operator == (const BaseCertId & rhs) const
  {
    if (!(issuer == rhs.issuer))
      return false;
    if (!(serial == rhs.serial))
      return false;
    return true;
  }
  bool operator != (const BaseCertId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseCertId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BaseCertId &a, BaseCertId &b);

typedef struct _ACHolder__isset {
  _ACHolder__isset() : entityName(false), baseCertId(false) {}
  bool entityName;
  bool baseCertId;
} _ACHolder__isset;

class ACHolder {
 public:

  static const char* ascii_fingerprint; // = "ED08028D26717C4CC517A0512EE103E9";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x08,0x02,0x8D,0x26,0x71,0x7C,0x4C,0xC5,0x17,0xA0,0x51,0x2E,0xE1,0x03,0xE9};

  ACHolder() {
  }

  virtual ~ACHolder() throw() {}

  X509Name entityName;
  BaseCertId baseCertId;

  _ACHolder__isset __isset;

  void __set_entityName(const X509Name& val) {
    entityName = val;
    __isset.entityName = true;
  }

  void __set_baseCertId(const BaseCertId& val) {
    baseCertId = val;
    __isset.baseCertId = true;
  }

  bool operator == (const ACHolder & rhs) const
  {
    if (__isset.entityName != rhs.__isset.entityName)
      return false;
    else if (__isset.entityName && !(entityName == rhs.entityName))
      return false;
    if (__isset.baseCertId != rhs.__isset.baseCertId)
      return false;
    else if (__isset.baseCertId && !(baseCertId == rhs.baseCertId))
      return false;
    return true;
  }
  bool operator != (const ACHolder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACHolder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACHolder &a, ACHolder &b);

typedef struct _ACInfo__isset {
  _ACInfo__isset() : version(false), holder(false), issuer(false), signatureAlgorithm(false), serial(false), validity(false), attributes(false), extensions(false) {}
  bool version;
  bool holder;
  bool issuer;
  bool signatureAlgorithm;
  bool serial;
  bool validity;
  bool attributes;
  bool extensions;
} _ACInfo__isset;

class ACInfo {
 public:

  static const char* ascii_fingerprint; // = "73E6257E16DDE85821A97347D14C66C7";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xE6,0x25,0x7E,0x16,0xDD,0xE8,0x58,0x21,0xA9,0x73,0x47,0xD1,0x4C,0x66,0xC7};

  ACInfo() : version(0), signatureAlgorithm(), serial(0) {
  }

  virtual ~ACInfo() throw() {}

  int16_t version;
  ACHolder holder;
  X509Name issuer;
  std::string signatureAlgorithm;
  int64_t serial;
  ACValidity validity;
  std::vector<Attribute>  attributes;
  std::vector<Extension>  extensions;

  _ACInfo__isset __isset;

  void __set_version(const int16_t val) {
    version = val;
  }

  void __set_holder(const ACHolder& val) {
    holder = val;
  }

  void __set_issuer(const X509Name& val) {
    issuer = val;
  }

  void __set_signatureAlgorithm(const std::string& val) {
    signatureAlgorithm = val;
  }

  void __set_serial(const int64_t val) {
    serial = val;
  }

  void __set_validity(const ACValidity& val) {
    validity = val;
  }

  void __set_attributes(const std::vector<Attribute> & val) {
    attributes = val;
  }

  void __set_extensions(const std::vector<Extension> & val) {
    extensions = val;
    __isset.extensions = true;
  }

  bool operator == (const ACInfo & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(holder == rhs.holder))
      return false;
    if (!(issuer == rhs.issuer))
      return false;
    if (!(signatureAlgorithm == rhs.signatureAlgorithm))
      return false;
    if (!(serial == rhs.serial))
      return false;
    if (!(validity == rhs.validity))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    if (__isset.extensions != rhs.__isset.extensions)
      return false;
    else if (__isset.extensions && !(extensions == rhs.extensions))
      return false;
    return true;
  }
  bool operator != (const ACInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACInfo &a, ACInfo &b);

typedef struct _AttributeCertificate__isset {
  _AttributeCertificate__isset() : info(false), algor(false), signature(false), pem(false) {}
  bool info;
  bool algor;
  bool signature;
  bool pem;
} _AttributeCertificate__isset;

class AttributeCertificate {
 public:

  static const char* ascii_fingerprint; // = "155EE2BB93263B1B9CA850EF19578E90";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x5E,0xE2,0xBB,0x93,0x26,0x3B,0x1B,0x9C,0xA8,0x50,0xEF,0x19,0x57,0x8E,0x90};

  AttributeCertificate() : algor(), signature(), pem() {
  }

  virtual ~AttributeCertificate() throw() {}

  ACInfo info;
  std::string algor;
  std::string signature;
  std::string pem;

  _AttributeCertificate__isset __isset;

  void __set_info(const ACInfo& val) {
    info = val;
  }

  void __set_algor(const std::string& val) {
    algor = val;
  }

  void __set_signature(const std::string& val) {
    signature = val;
  }

  void __set_pem(const std::string& val) {
    pem = val;
  }

  bool operator == (const AttributeCertificate & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    if (!(algor == rhs.algor))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (!(pem == rhs.pem))
      return false;
    return true;
  }
  bool operator != (const AttributeCertificate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttributeCertificate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttributeCertificate &a, AttributeCertificate &b);

typedef struct _ACIssueInfo__isset {
  _ACIssueInfo__isset() : holder(false), templateId(false), issuer(false), validity(false), attributes(false), extensions(false) {}
  bool holder;
  bool templateId;
  bool issuer;
  bool validity;
  bool attributes;
  bool extensions;
} _ACIssueInfo__isset;

class ACIssueInfo {
 public:

  static const char* ascii_fingerprint; // = "7A9929745C961A1466EB1CA2C60E22D6";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x99,0x29,0x74,0x5C,0x96,0x1A,0x14,0x66,0xEB,0x1C,0xA2,0xC6,0x0E,0x22,0xD6};

  ACIssueInfo() : templateId(0) {
  }

  virtual ~ACIssueInfo() throw() {}

  ACHolder holder;
  int16_t templateId;
  X509Name issuer;
  ACValidity validity;
  std::vector<Attribute>  attributes;
  std::vector<Extension>  extensions;

  _ACIssueInfo__isset __isset;

  void __set_holder(const ACHolder& val) {
    holder = val;
  }

  void __set_templateId(const int16_t val) {
    templateId = val;
    __isset.templateId = true;
  }

  void __set_issuer(const X509Name& val) {
    issuer = val;
    __isset.issuer = true;
  }

  void __set_validity(const ACValidity& val) {
    validity = val;
    __isset.validity = true;
  }

  void __set_attributes(const std::vector<Attribute> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  void __set_extensions(const std::vector<Extension> & val) {
    extensions = val;
    __isset.extensions = true;
  }

  bool operator == (const ACIssueInfo & rhs) const
  {
    if (!(holder == rhs.holder))
      return false;
    if (__isset.templateId != rhs.__isset.templateId)
      return false;
    else if (__isset.templateId && !(templateId == rhs.templateId))
      return false;
    if (__isset.issuer != rhs.__isset.issuer)
      return false;
    else if (__isset.issuer && !(issuer == rhs.issuer))
      return false;
    if (__isset.validity != rhs.__isset.validity)
      return false;
    else if (__isset.validity && !(validity == rhs.validity))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.extensions != rhs.__isset.extensions)
      return false;
    else if (__isset.extensions && !(extensions == rhs.extensions))
      return false;
    return true;
  }
  bool operator != (const ACIssueInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACIssueInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACIssueInfo &a, ACIssueInfo &b);

typedef struct _ACSearchInfo__isset {
  _ACSearchInfo__isset() : holder(false), attributesOid(false) {}
  bool holder;
  bool attributesOid;
} _ACSearchInfo__isset;

class ACSearchInfo {
 public:

  static const char* ascii_fingerprint; // = "280D0848881E85D3A89F4F0549C4B84A";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x0D,0x08,0x48,0x88,0x1E,0x85,0xD3,0xA8,0x9F,0x4F,0x05,0x49,0xC4,0xB8,0x4A};

  ACSearchInfo() {
  }

  virtual ~ACSearchInfo() throw() {}

  ACHolder holder;
  std::set<std::string>  attributesOid;

  _ACSearchInfo__isset __isset;

  void __set_holder(const ACHolder& val) {
    holder = val;
  }

  void __set_attributesOid(const std::set<std::string> & val) {
    attributesOid = val;
    __isset.attributesOid = true;
  }

  bool operator == (const ACSearchInfo & rhs) const
  {
    if (!(holder == rhs.holder))
      return false;
    if (__isset.attributesOid != rhs.__isset.attributesOid)
      return false;
    else if (__isset.attributesOid && !(attributesOid == rhs.attributesOid))
      return false;
    return true;
  }
  bool operator != (const ACSearchInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACSearchInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACSearchInfo &a, ACSearchInfo &b);

typedef struct _ACReq__isset {
  _ACReq__isset() : issueInfo(false), searchInfo(false), revInfo(false) {}
  bool issueInfo;
  bool searchInfo;
  bool revInfo;
} _ACReq__isset;

class ACReq {
 public:

  static const char* ascii_fingerprint; // = "C43F80A7249CCE97B6AD0D1577B33A26";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x3F,0x80,0xA7,0x24,0x9C,0xCE,0x97,0xB6,0xAD,0x0D,0x15,0x77,0xB3,0x3A,0x26};

  ACReq() : revInfo(0) {
  }

  virtual ~ACReq() throw() {}

  ACIssueInfo issueInfo;
  ACSearchInfo searchInfo;
  int64_t revInfo;

  _ACReq__isset __isset;

  void __set_issueInfo(const ACIssueInfo& val) {
    issueInfo = val;
    __isset.issueInfo = true;
  }

  void __set_searchInfo(const ACSearchInfo& val) {
    searchInfo = val;
    __isset.searchInfo = true;
  }

  void __set_revInfo(const int64_t val) {
    revInfo = val;
    __isset.revInfo = true;
  }

  bool operator == (const ACReq & rhs) const
  {
    if (__isset.issueInfo != rhs.__isset.issueInfo)
      return false;
    else if (__isset.issueInfo && !(issueInfo == rhs.issueInfo))
      return false;
    if (__isset.searchInfo != rhs.__isset.searchInfo)
      return false;
    else if (__isset.searchInfo && !(searchInfo == rhs.searchInfo))
      return false;
    if (__isset.revInfo != rhs.__isset.revInfo)
      return false;
    else if (__isset.revInfo && !(revInfo == rhs.revInfo))
      return false;
    return true;
  }
  bool operator != (const ACReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACReq &a, ACReq &b);

typedef struct _ACStatusInfo__isset {
  _ACStatusInfo__isset() : status(false), failInfo(false), failText(false) {}
  bool status;
  bool failInfo;
  bool failText;
} _ACStatusInfo__isset;

class ACStatusInfo {
 public:

  static const char* ascii_fingerprint; // = "DB054474B0C67F2BCDCAC66C0C09AA76";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x05,0x44,0x74,0xB0,0xC6,0x7F,0x2B,0xCD,0xCA,0xC6,0x6C,0x0C,0x09,0xAA,0x76};

  ACStatusInfo() : status((ACStatus::type)0), failInfo((ACFailureInfo::type)0), failText() {
  }

  virtual ~ACStatusInfo() throw() {}

  ACStatus::type status;
  ACFailureInfo::type failInfo;
  std::string failText;

  _ACStatusInfo__isset __isset;

  void __set_status(const ACStatus::type val) {
    status = val;
  }

  void __set_failInfo(const ACFailureInfo::type val) {
    failInfo = val;
    __isset.failInfo = true;
  }

  void __set_failText(const std::string& val) {
    failText = val;
    __isset.failText = true;
  }

  bool operator == (const ACStatusInfo & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.failInfo != rhs.__isset.failInfo)
      return false;
    else if (__isset.failInfo && !(failInfo == rhs.failInfo))
      return false;
    if (__isset.failText != rhs.__isset.failText)
      return false;
    else if (__isset.failText && !(failText == rhs.failText))
      return false;
    return true;
  }
  bool operator != (const ACStatusInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACStatusInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACStatusInfo &a, ACStatusInfo &b);

typedef struct _ACResp__isset {
  _ACResp__isset() : statusInfo(false), acs(false) {}
  bool statusInfo;
  bool acs;
} _ACResp__isset;

class ACResp {
 public:

  static const char* ascii_fingerprint; // = "5D0F52F1479C6E5B7D6278BEC935EE43";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x0F,0x52,0xF1,0x47,0x9C,0x6E,0x5B,0x7D,0x62,0x78,0xBE,0xC9,0x35,0xEE,0x43};

  ACResp() {
  }

  virtual ~ACResp() throw() {}

  ACStatusInfo statusInfo;
  std::vector<AttributeCertificate>  acs;

  _ACResp__isset __isset;

  void __set_statusInfo(const ACStatusInfo& val) {
    statusInfo = val;
  }

  void __set_acs(const std::vector<AttributeCertificate> & val) {
    acs = val;
    __isset.acs = true;
  }

  bool operator == (const ACResp & rhs) const
  {
    if (!(statusInfo == rhs.statusInfo))
      return false;
    if (__isset.acs != rhs.__isset.acs)
      return false;
    else if (__isset.acs && !(acs == rhs.acs))
      return false;
    return true;
  }
  bool operator != (const ACResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ACResp &a, ACResp &b);

} // namespace

#endif
